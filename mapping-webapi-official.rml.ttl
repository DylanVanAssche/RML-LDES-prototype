# 
# RML mapping rules for https://datapiloten.be/bluebike/availabilities.geojson
# (c) Dylan Van Assche (2021)
# IDLab - Ghent University - imec
#
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rmlt: <http://semweb.mmlab.be/ns/rml-target#> .
@prefix rdfs: <https://www.w3.org/2000/01/rdf-schema#> .
@prefix comp: <http://semweb.mmlab.be/ns/rml-compression#> .
@prefix formats: <http://www.w3.org/ns/formats/> .
@prefix ex: <http://example.com/> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix td: <https://www.w3.org/2019/wot/td#> .
@prefix htv: <http://www.w3.org/2011/http#> .
@prefix hctl: <https://www.w3.org/2019/wot/hypermedia#> .
@prefix schema: <http://schema.org/> .
@prefix gtfs: <http://vocab.gtfs.org/terms#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix grel: <http://users.ugent.be/~bjdmeest/function/grel.ttl#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix tree: <https://w3id.org/tree#> .
@prefix ldes: <https://w3id.org/ldes#> .
@prefix idlab: <http://example.com/idlab/function/> .
@base <http://example.org/rules/> .

# Github will serve GZip compressed files if available.
# However, you have to provide the regular file as well.
<#TargetDump> a rmlt:LogicalTarget;
  rmlt:target [ a void:Dataset;
    void:dataDump <file://./public/bluebike.ttl>;
  ];
  rmlt:serialization formats:Turtle;
.

<#TargetDumpGzip> a rmlt:LogicalTarget;
  rmlt:target [ a void:Dataset;
    void:dataDump <file://./public/bluebike.ttl.gz>;
  ];
  rmlt:serialization formats:Turtle;
  rmlt:compression comp:gzip;
.

<#TDForm> a td:Form;
  # URL
  # See private security file
  # Content type
  hctl:forContentType "application/json";
  # Read only
  hctl:hasOperationType td:readproperty;
  # Set HTTP method and headers
  htv:methodName "GET";
  htv:headers ([
    htv:fieldName "User-Agent";
    htv:fieldValue "IDLab - Ghent University - imec (RMLMapper)";
  ]);
.

<#WoTWebAPISource> a td:PropertyAffordance;
  td:hasForm <#TDForm>;
.

<#WoTWebAPI> a td:Thing;
  td:hasPropertyAffordance <#WoTWebResource>;
.

# TREE view
<#ViewTriplesMap> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "ldes.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$";
  ];

  rr:subjectMap[
    rml:reference "ldes.iri";
    rr:termType rr:IRI;
    rml:logicalTarget <#TargetDump>;
    rml:logicalTarget <#TargetDumpGzip>;
  ];

  # LDES retention policy
  rr:predicateObjectMap [
    rr:predicate ldes:retentionPolicy;
    rr:objectMap [
       fnml:functionValue [
           rr:predicateObjectMap [
               rr:predicate fno:executes ;
               rr:objectMap [ rr:constant grel:array_join ]
           ];
           rr:predicateObjectMap [
               rr:predicate grel:p_array_a ;
               rr:objectMap [ rml:reference "ldes.iri" ]
           ];
           rr:predicateObjectMap [
               rr:predicate grel:p_array_a ;
               rr:objectMap [ rr:constant "#retention"; ]
           ];
           rr:predicateObjectMap [
               rr:predicate grel:p_string_sep ;
               rr:objectMap [ rr:constant ""; ]
           ];
       ];
       rr:termType rr:IRI;
    ];
  ];
.

# LDES RetentionPolicy
<#RetentionPolicyTriplesMap> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "ldes.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$";
  ];

  rr:subjectMap[
    fnml:functionValue [
       rr:predicateObjectMap [
           rr:predicate fno:executes ;
           rr:objectMap [ rr:constant grel:array_join ]
       ];
       rr:predicateObjectMap [
           rr:predicate grel:p_array_a ;
           rr:objectMap [ rml:reference "ldes.iri" ]
       ];
       rr:predicateObjectMap [
           rr:predicate grel:p_array_a ;
           rr:objectMap [ rr:constant "#retention"; ]
       ];
    ];
    rr:termType rr:IRI;
    rml:logicalTarget <#TargetDump>;
    rml:logicalTarget <#TargetDumpGzip>;
  ];

  # rdf:type
  rr:predicateObjectMap [
    rr:predicate rdf:type;
    rr:objectMap [ rml:reference "ldes.retentionPolicy.type"; rr:termType rr:IRI; ];
  ];

  rr:predicateObjectMap [
    rr:predicate ldes:amount;
    rr:objectMap [ rml:reference "ldes.retentionPolicy.amount"; rr:datatype xsd:integer; ];
  ];

  rr:predicateObjectMap [
    rr:predicate ldes:timestampPath;
    rr:object dcterms:created;
  ];

  rr:predicateObjectMap [
    rr:predicate ldes:versionOfPath;
    rr:object dcterms:isVersionOf;
  ];
.

<#TreeTriplesMap> a rr:TriplesMap;
  rml:logicalSource [ 
    rml:source "ldes.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$"
  ];

  # LDES stream
  rr:subjectMap[
    fnml:functionValue [
       rr:predicateObjectMap [
           rr:predicate fno:executes ;
           rr:objectMap [ rr:constant grel:array_join ]
       ];
       rr:predicateObjectMap [
           rr:predicate grel:p_array_a ;
           rr:objectMap [ rml:reference "ldes.iri" ]
       ];
       rr:predicateObjectMap [
           rr:predicate grel:p_array_a ;
           rr:objectMap [ rr:constant "#eventstream"; ]
       ];
    ];
    rr:termType rr:IRI;
    rr:class ldes:EventStream;
    rml:logicalTarget <#TargetDump>;
    rml:logicalTarget <#TargetDumpGzip>;
  ];

  # TREE member
  rr:predicateObjectMap [
    rr:predicate tree:member;
    rr:objectMap [ a rr:ObjectMap;
      rr:parentTriplesMap <#StationsTriplesMap>;
      rr:termType rr:IRI;
    ];
  ];

  # TREE view
  rr:predicateObjectMap [
    rr:predicate tree:view;
    rr:objectMap [ a rr:ObjectMap;
      rml:reference "ldes.iri";
      rr:termType rr:IRI;
    ];
  ];
.

<#StationsTriplesMap> a rr:TriplesMap;
  rml:logicalSource [ a rml:LogicalSource;
    rml:source <#WoTWebAPISource>;
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.[*]";
  ];
  # Unique IRI generation: $stationId#$generatedAtTime
  rr:subjectMap [ 
    fnml:functionValue [
        rr:predicateObjectMap [
            rr:predicate fno:executes ;
            rr:objectMap [ rr:constant grel:array_join ]
        ];
        rr:predicateObjectMap [
            rr:predicate grel:p_array_a ;
            rr:objectMap [ rr:template "http://irail.be/stations/bluebike/{name}" ]
        ];
        rr:predicateObjectMap [
            rr:predicate grel:p_array_a ;
            rr:objectMap [ 
                fnml:functionValue [
                    rr:predicateObjectMap [
                        rr:predicate fno:executes ;
                        rr:objectMap [ rr:constant grel:array_join ]
                    ];
            
                    rr:predicateObjectMap [
                        rr:predicate grel:p_array_a ;
                        rr:objectMap [ rr:constant "#" ]
                    ];

                    rr:predicateObjectMap [
                        rr:predicate grel:p_array_a ;
                        rr:objectMap [ rml:reference "last_seen" ]
                    ];
                ];
            ];
        ];
    ];
    rr:termType rr:IRI;
    rml:logicalTarget <#TargetDump>;
    rml:logicalTarget <#TargetDumpGzip>;
  ];

  # rdf:type
  rr:predicateObjectMap [
    rr:predicate rdf:type;
    rr:objectMap [
      fnml:functionValue [
      	rr:predicateObjectMap [
          rr:predicate fno:executes ;
      	  rr:objectMap [ rr:constant grel:controls_if ]
        ];
        rr:predicateObjectMap [
          rr:predicate grel:bool_b ;
          rr:objectMap [ 
            fnml:functionValue [
              rr:predicateObjectMap [
                rr:predicate fno:executes;
                rr:objectMap [ rr:constant idlab:equal ];
              ];
              rr:predicateObjectMap [
                rr:predicate grel:valueParameter;
                rr:objectMap [ rml:reference "type" ];
              ];
              rr:predicateObjectMap [
                rr:predicate grel:valueParameter2;
                rr:objectMap [ rr:constant "1" ];
              ];
            ];
            rr:datatype xsd:boolean
          ];
        ];
        rr:predicateObjectMap [
          rr:predicate grel:any_true ;
          rr:objectMap [ rr:constant "https://schema.org/ParkingFacility"; rr:termType rr:IRI ]
        ];
        rr:predicateObjectMap [
          rr:predicate grel:any_false ;
          rr:objectMap [ rr:constant "https://schema.org/ParkingFacilitySmartLock"; rr:termType rr:IRI ]
        ];
      ];
      rr:datatype rr:IRI;
    ];
  ];

  # BlueBike station: name
  rr:predicateObjectMap [ 
    rr:predicate schema:name ; 
    rr:objectMap [ rml:reference "name"; rr:datatype xsd:string; ]
  ];

  # BlueBike station: available bicycles
  rr:predicateObjectMap [ 
    rr:predicate ex:bikesAvailable ; 
    rr:objectMap [ rml:reference "bikes_available"; rr:datatype xsd:integer; ]
  ];

  # BlueBike station: maximum capacity
  # TODO: needs custom FnO to take the sum of bikes_available and bikes_in_use
#  rr:predicateObjectMap [ 
#    rr:predicate ex:capacity ; 
#    rr:objectMap [ rml:reference ""; rr:datatype xsd:integer; ]
#  ];

  # BlueBike station: available docks = bikes_in_use
  rr:predicateObjectMap [ 
    rr:predicate ex:docksAvailable ; 
    rr:objectMap [ rml:reference "bikes_in_use"; rr:datatype xsd:integer; ]
  ];

  # Geo location
  rr:predicateObjectMap [ 
    rr:predicate geo:latitude ; 
    rr:objectMap [ rml:reference "latitude"; rr:datatype xsd:float; ]
  ];

  rr:predicateObjectMap [ 
    rr:predicate geo:longitude ; 
    rr:objectMap [ rml:reference "longitude"; rr:datatype xsd:float; ]
  ];

  # Versioning
  rr:predicateObjectMap [
    rr:predicate dcterms:created ;
    rr:objectMap [ rml:reference "last_seen"; rr:dataType xsd:dateTime; ]
  ];

  rr:predicateObjectMap [
    rr:predicate dcterms:isVersionOf ;
    rr:objectMap [ rr:template "http://irail.be/stations/bluebike/{name}"; rr:termType rr:IRI; ]
  ];
.
